import numpy as np

# Constante du nombre d'or
phi = (1 + np.sqrt(5)) / 2  # ≈ 1.61803
inv_phi = 1 / phi           # ≈ 0.61803

# Dictionnaire contenant tous les solides de Platon
solids = {
    'tetrahedron': {
        'vertices': np.array([
            [1, 1, 1],     # Sommet 0
            [-1, -1, 1],   # Sommet 1
            [-1, 1, -1],   # Sommet 2
            [1, -1, -1]    # Sommet 3
        ]),
        'edges': [(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)],
        'faces': [[0, 2, 1], [2, 3, 1], [1, 3, 0], [0, 1, 3], [1, 2, 3], [3, 2, 0], [2, 1, 0], [0, 3, 2]]
    },
    'cube': {
        'vertices': np.array([
            [-1, -1, -1],  # Sommet 0
            [-1, -1,  1],  # Sommet 1
            [-1,  1, -1],  # Sommet 2
            [-1,  1,  1],  # Sommet 3
            [1, -1, -1],   # Sommet 4
            [1, -1,  1],   # Sommet 5
            [1,  1, -1],   # Sommet 6
            [1,  1,  1]    # Sommet 7
        ]),
        'edges': [(0, 1), (0, 2), (0, 4), (1, 3), (1, 5), (2, 3), (2, 6), (3, 7), (4, 5), (4, 6), (5, 7), (6, 7)],
        'faces': [[4, 5, 1, 0], [1, 5, 7, 3], [1, 3, 2, 0], [4, 6, 7, 5], [3, 7, 6, 2], [0, 1, 3, 2], [2, 3, 7, 6], [0, 2, 6, 4], [2, 6, 4, 0], [6, 7, 5, 4], [5, 7, 3, 1], [0, 4, 5, 1]]
    },
    'octahedron': {
        'vertices': np.array([
            [1, 0, 0],     # Sommet 0
            [-1, 0, 0],    # Sommet 1
            [0, 1, 0],     # Sommet 2
            [0, -1, 0],    # Sommet 3
            [0, 0, 1],     # Sommet 4
            [0, 0, -1]     # Sommet 5
        ]),
        'edges': [(0, 2), (0, 3), (0, 4), (0, 5), (1, 2), (1, 3), (1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5)],
        'faces': [[0, 2, 4], [3, 5, 0], [5, 3, 1], [4, 3, 0], [1, 4, 2], [1, 3, 4], [3, 4, 1], [0, 4, 3], [1, 5, 3], [0, 5, 2], [2, 5, 1], [1, 2, 5], [5, 2, 0], [2, 4, 0], [0, 3, 5], [4, 2, 1]]
    },
    'dodecahedron': {
        'vertices': np.array([
            # Sommets (±1, ±1, ±1)
            [-1, -1, -1],  # 0
            [-1, -1, 1],   # 1
            [-1, 1, -1],   # 2
            [-1, 1, 1],    # 3
            [1, -1, -1],   # 4
            [1, -1, 1],    # 5
            [1, 1, -1],    # 6
            [1, 1, 1],     # 7
            # Sommets (0, ±inv_phi, ±phi)
            [0, -inv_phi, -phi],  # 8
            [0, -inv_phi, phi],   # 9
            [0, inv_phi, -phi],   # 10
            [0, inv_phi, phi],    # 11
            # Sommets (±inv_phi, ±phi, 0)
            [-inv_phi, -phi, 0],  # 12
            [-inv_phi, phi, 0],   # 13
            [inv_phi, -phi, 0],   # 14
            [inv_phi, phi, 0],    # 15
            # Sommets (±phi, 0, ±inv_phi)
            [-phi, 0, -inv_phi],  # 16
            [-phi, 0, inv_phi],   # 17
            [phi, 0, -inv_phi],   # 18
            [phi, 0, inv_phi]     # 19
        ]),
        'edges': [(0, 8), (0, 12), (0, 16), (1, 9), (1, 12), (1, 17), (2, 10), (2, 13), (2, 16), (3, 11), (3, 13), (3, 17), (4, 8), (4, 14), (4, 18), (5, 9), (5, 14), (5, 19), (6, 10), (6, 15), (6, 18), (7, 11), (7, 15), (7, 19), (8, 10), (9, 11), (12, 14), (13, 15), (16, 17), (18, 19)],
        'faces': [[6, 15, 7, 19, 18], [0, 8, 4, 14, 12], [19, 7, 11, 9, 5], [3, 11, 7, 15, 13], [0, 12, 1, 17, 16], [1, 12, 14, 5, 9], [18, 19, 5, 14, 4], [2, 13, 15, 6, 10], [16, 17, 3, 13, 2], [12, 1, 17, 16, 0], [11, 7, 15, 13, 3], [4, 18, 19, 5, 14], [5, 19, 7, 11, 9], [0, 16, 2, 10, 8], [15, 7, 19, 18, 6], [8, 4, 14, 12, 0], [8, 10, 6, 18, 4], [9, 11, 3, 17, 1], [2, 16, 17, 3, 13], [1, 9, 11, 3, 17], [16, 2, 10, 8, 0], [13, 15, 6, 10, 2], [12, 14, 5, 9, 1], [4, 8, 10, 6, 18]]
    },
    'icosahedron': {
        'vertices': np.array([
            # Sommets (0, ±1, ±phi)
            [0, -1, -phi], [0, -1, phi], [0, 1, -phi], [0, 1, phi],
            # Sommets (±1, ±phi, 0)
            [-1, -phi, 0], [-1, phi, 0], [1, -phi, 0], [1, phi, 0],
            # Sommets (±phi, 0, ±1)
            [-phi, 0, -1], [-phi, 0, 1], [phi, 0, -1], [phi, 0, 1]
        ]),
        'edges': [(0, 2), (0, 4), (0, 6), (0, 8), (0, 10), (1, 3), (1, 4), (1, 6), (1, 9), (1, 11), (2, 5), (2, 7), (2, 8), (2, 10), (3, 5), (3, 7), (3, 9), (3, 11), (4, 6), (4, 8), (4, 9), (5, 7), (5, 8), (5, 9), (6, 10), (6, 11), (7, 10), (7, 11), (8, 9), (10, 11)],
        'faces': [[0, 4, 8], [11, 10, 7], [3, 11, 7], [3, 5, 9], [2, 5, 7], [2, 7, 10], [2, 10, 0], [0, 8, 2], [1, 3, 9], [1, 9, 4], [0, 2, 10], [2, 8, 5], [0, 6, 4], [10, 6, 0], [1, 6, 11], [3, 7, 5], [11, 7, 3], [4, 8, 0], [11, 3, 1], [3, 9, 1], [6, 11, 1], [5, 9, 3], [1, 11, 3], [6, 4, 0], [4, 6, 1], [9, 8, 4], [7, 10, 2], [4, 9, 8], [5, 8, 9], [7, 5, 3], [8, 9, 5], [8, 5, 2], [5, 7, 2], [7, 11, 10], [1, 4, 6], [9, 4, 1], [6, 10, 11], [10, 11, 6], [0, 10, 6], [8, 2, 0]]
    }
}
